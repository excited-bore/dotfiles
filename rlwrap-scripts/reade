#!/bin/bash
# Shebang not really except for nvim bash language server registering

function reade() {
    test -n "$ZSH_VERSION" && 
        setopt local_options err_return local_traps extended_glob &&
        HISTSIZE=1000 &&
        SAVEHIST=1000

    local red=$(tput sgr0 && tput setaf 1)
    local red1=$(tput sgr0 && tput setaf 9)
    local orange=$(tput sgr0 && tput setaf 166)
    local green=$(tput sgr0 && tput setaf 2)
    local green1=$(tput sgr0 && tput setaf 10)
    local yellow=$(tput sgr0 && tput setaf 3)
    local yellow1=$(tput sgr0 && tput setaf 11)
    local blue=$(tput sgr0 && tput setaf 4)
    local blue1=$(tput sgr0 && tput setaf 12)
    local magenta=$(tput sgr0 && tput setaf 5)
    local magenta1=$(tput sgr0 && tput setaf 13)
    local cyan=$(tput sgr0 && tput setaf 6)
    local cyan1=$(tput sgr0 && tput setaf 14)
    local white=$(tput sgr0 && tput setaf 7)
    local white1=$(tput sgr0 && tput setaf 15)
    local black=$(tput sgr0 && tput setaf 16)
    local grey=$(tput sgr0 && tput setaf 8)

    local RED=$(tput setaf 1 && tput bold)
    local RED1=$(tput setaf 9 && tput bold)
    local ORANGE=$(tput setaf 166 && tput bold)
    local GREEN=$(tput setaf 2 && tput bold)
    local GREEN1=$(tput setaf 10 && tput bold)
    local YELLOW=$(tput setaf 3 && tput bold)
    local YELLOW1=$(tput setaf 11 && tput bold)
    local BLUE=$(tput setaf 4 && tput bold)
    local BLUE1=$(tput setaf 12 && tput bold)
    local MAGENTA=$(tput setaf 5 && tput bold)
    local MAGENTA1=$(tput setaf 13 && tput bold)
    local CYAN=$(tput setaf 6 && tput bold)
    local CYAN1=$(tput setaf 14 && tput bold)
    local WHITE=$(tput setaf 7 && tput bold)
    local WHITE1=$(tput setaf 15 && tput bold)
    local BLACK=$(tput setaf 16 && tput bold)
    local GREY=$(tput setaf 8 && tput bold)


    local bold=$(tput bold)
    local underline_on=$(tput smul)
    local underline_off=$(tput rmul)
    local standout_on=$(tput smso)
    local standout_off=$(tput rmso)
    local half_bright=$(tput dim)
    local reverse_color=$(tput rev)

    # Reset
    local normal=$(tput sgr0)

    # Broken !! (Or im dumb?)
    local blink=$(tput blink)
    local underline=$(tput ul)
    local italic=$(tput it)

    local VERSION='2.0'

    unset READE_VALUE

    local hlpstr="${bold}READE${normal} [ -h / --help ] [ -v / --version] [ -i / --pregiven PREGIVEN(S) SPACESEPARATED STRING ] [ -s / --no-echo ] [ -a / --auto ( ${bold}always${normal}/oneoption ) ] [ -e / --file-completion ]  [ -p / --prompt PROMPTSTRING ] [ -Q / --colour COLOURSTRING ] [ -r / --read-no-style ( ${bold}never${normal}/nocomp/filecomp-only ) ] [ -b/--break-chars BREAKCHARS-STRING ] ${bold}returnvar${normal}
   
   reade version $VERSION

   Simplifies prompt for ${bold}read/rlwrap${normal}: Will use 'rlwrap' if it is installed, otherwise resorts to 'read' 
   Takes at least one argument, otherwise will prompt help page.

   Any pre-given choice can be toggled between using the ${bold}up${normal} and ${bold}down${normal} arrow keys

   Supply at least 1 variable: 

   - The last argument - a variable to put the prompt response in. If no variable is supplied, the returned value will be in the '\$REPLY' and '\$READE_VALUE'. 

   -h, --help  
        
        Print this text and exit

   -v, --version  
        
        Print version and exit

   -Q ${underline_on}Colour${underline_off}

        Use  one  of  the  colour names black, red, green, yellow, blue, cyan, purple (=magenta) or white, or an ANSI-conformant <colour_spec> to colour any prompt displayed  by  command.\n An uppercase colour name (Yellow or YELLOW ) gives a bold prompt.\n Prompts that already contain (colour) escape sequences or one of the readline \"ignore markers\" (ASCII 0x01 and 0x02) are not coloured.

    -i, --pre-given ${underline_on}PREGIVEN(S) - SPACESEPERATED WORD STRING${underline_off} 

        Autofill prompt with 'PREGIVEN' - must come in the form of a string (only works when rlwrap is installed) and every WORD needs to be space-separated. Only the first will be show at first, the others will be selectable with autocompletion/arrowkeys in the order they were given ${bold}if rlwrap is installed${normal} 

   -s, --no-echo 

        Doesn't echo what's being typed to the terminal - usefull for password prompts and the like

   -a, --auto ( ${bold}always${normal}/oneoption ) 
            
        Fill in with the pregiven immediately. Usefull when running variants of scripts that use readyn and are supposed to automatically fill in a default answer.
        If multiple pregivens are supplied with -i / --pre-given, the first one will become the automatic answer.
        Two optional arguments: 
            - 'always': always autocomplete (Default behaviour)
            - 'oneoption': only autocomplete if there's only one option available
            
   -e, --file-completion 

        Use filecompletions. 
        Will stop using rlwrap if it is installed because 'rlwrap' doesn't properly add slashed before spaces in filenames/directorynames and will use 'read -e' which does properly do this instead
   
    -r, --read-no-style [ OPTION - ${bold}'nocomp'/'filecomp-only'${normal} ] 

        This will stop read from using ${GREEN}colors${normal}/${bold}${underline_on}styles${normal} when applied.
        
        As read is pretty archaic and has been broken for a while, having a colorized 'read -p' prompt that uses prefixes/autocomp while obtaining bashhistory from readline using the '-e' flag can be problematic because cycling enough times through the given options will cause part of the option to 'stick' to the prompt - essentially breaking the prompt.
        This is why most reade colorized prompts have their autocompletion underneath the prompt when rlwrap is not installed - it uses 'printf PROMPT' instead of using 'read -p PROMPT' 
        (!! ${bold}even when no color is supplied, since color/style can still supplied as a part of a given prompt so this is suspected${normal} !!). 
        
        This flag ${bold}${underline_on}mitigates that${normal}, which will remove all applied colors/styles and thus mitigate the need to avoid using 'read -p' 
        (with an extra style removing check on the supplied prompt to make sure no style is passed).
        
        No option will never leave a style
        Option (optional) can be one of these: 
            - 'never': never leave any style (Default behaviour) 
            - 'filecomp-only' causes reade to only remove colors/styles when using read's filecompletion flag '-e'.
            - 'nocomp' causes reade to ${bold}allow colors/styles but never use multiple autocompletions feature${normal} to avoid moving arrowkeys up and down, the cause of prompts breaking)
            In other words nocomp will not autocomplete ${bold}apart from the first (or only) pregiven/prefix${normal} 

        There's also a environment variable READE_NOSTYLE that can be set beforehand with options: 'true', 'false', 'nocomp', 'filecomp-only'
        This flag will preceed the option set with READE_NOSTYLE. 
    
   -b, --break=chars ${underline_on}list_of_characters${underline_off} 

       (From rlwrap manual) Consider  the specified characters word-breaking (whitespace is always word-breaking). This determines what is considered a \"word\", both when completing and when building a completion word list from files specified by -f options following (not preceding!) it.\n Default list (){}[],'+-=&^%%\$#@\";|\ \n Unless -c is specified, / and . (period) are included in the default list
       
       ${bold}( This option is kind of broken )${bold}\n\n"

    while :; do
        case $1 in
        '' | -h | -\? | --help)
            printf "$hlpstr"
            return 0
            ;;
        -v | --version)
            printf "${bold}Version${normal} : $VERSION\n"
            return 0
            ;;
        # Otherwise
        *)
            break
            ;;
        esac
    done 
    OPTIND=1

    # https://stackoverflow.com/questions/12022592/how-can-i-use-long-options-with-the-bash-getopts-builtin
    # I'm ignoring this because I don't want to deal with the hassle of making sure the GNU/right version of getopt is installed

    for arg in "$@"; do
        shift
        case "$arg" in
            '--break-chars')        set -- "$@" '-b' ;;
            '--colour')             set -- "$@" '-Q' ;;
            '--prompt')             set -- "$@" '-p' ;;
            '--file-completions')   set -- "$@" '-e' ;;
            '--pre-given')          set -- "$@" '-i' ;;
            '--auto')               set -- "$@" '-a' ;;
            '--read-no-style')      set -- "$@" '-r' ;; 
            '--no-echo')            set -- "$@" '-s' ;;
            *)                      set -- "$@" "$arg" ;;
        esac
    done

    local fcomp='n' auto='n' nostyle='n' noecho='n' prmpt=''

    if [[ "$READE_NOSTYLE" ]]; then
        [[ "$READE_NOSTYLE" == 'false' ]] && nostyle='n'  
        [[ "$READE_NOSTYLE" == 'true' ]] && nostyle='y'
        [[ "$READE_NOSTYLE" == 'nocomp' ]] && nostyle='c'  
        [[ "$READE_NOSTYLE" == 'filecomp-only' ]] && nostyle='f'  
    fi

    # a = flag without argument
    # a: = flag with argument
    # a:: = flag with optional argument (bash > 4.3 only)
    # I'm ignoring this because I need this script to be ZSH compatible

    local flag 

    while getopts ':sb:e:i:p:Q:r:a:' flag; do
        case "${flag}" in
        a)
            auto='y'
            if [[ "${OPTARG}" ]]; then
                if [[ "${OPTARG}" == 'always' ]]; then
                    auto='y'
                elif [[ "${OPTARG}" == 'oneoption' ]]; then
                    auto='one'
                elif [[ "${OPTARG}" == '-Q' || "${OPTARG}" == '-b' || "${OPTARG}" == '-e' || "${OPTARG}" == '-i' || "${OPTARG}" == '-p' || "${OPTARG}" == '-r' ]]; then
                    OPTIND=$(($OPTIND - 1)) 
                else 
                    echo "${red}'${OPTARG}'${normal} is not an option for -a/--always"
                    echo "Choose between --auto always or --auto oneoption"
                    return 1
                fi
            fi 
            ;;
        e)
            fcomp='y'
            ;;
        r)
            nostyle='y'
            if [[ "${OPTARG}" ]]; then
                if [[ "${OPTARG}" == 'never' ]]; then
                    nostyle= 'y'
                elif [[ "${OPTARG}" == 'nocomp' ]]; then
                    nostyle= 'c'
                elif [[ "${OPTARG}" == 'filecomp-only' ]]; then
                    nostyle='f'
                elif [[ "${OPTARG}" == '-Q' || "${OPTARG}" == '-b' || "${OPTARG}" == '-e' || "${OPTARG}" == '-i' || "${OPTARG}" == '-p' || "${OPTARG}" == '-a' ]]; then 
                    OPTIND=$(($OPTIND - 1))
                else
                    echo "${red}'${OPTARG}'${normal} is not an option for -r/--read-no-style"
                    echo "Choose between --read-no-style never, --read-no-style nocomp or --read-no-style filecomp-only" 
                    return 1
                fi
            fi
            ;;
        s)
            noecho='y'
            ;;
        esac
    done 
    OPTIND=1

    local rlwrap_installable='y'

    if [[ $(uname -s) =~ 'MINGW' ]] && ! type hash &>/dev/null; then
        rlwrap_installable='n'
    fi

    if ! hash rlwrap &>/dev/null || [[ "$fcomp" == 'y' ]] || [[ "$rlwrap_installable" == 'n' ]]; then

        local readstr=''

        if test -n "$BASH_VERSION"; then
            readstr="read -r vvvvvvvvvv"
        fi

        if test -n "$ZSH_VERSION"; then
            if [[ "$noecho" == 'y' ]]; then
                readstr="read vvvvvvvvvv"
            elif [[ "$noecho" == 'n' ]]; then
                readstr="vvvvvvvvvv=''; vared vvvvvvvvvv"
            fi
        fi
     
	local oldhist='' color="" arg='' args='' tmpf='' eflag=0 one='n' pre=''
        while getopts ':sb:e:i:p:Q:a:r:' flag; do
            case "${flag}" in
                a)  if [[ "${OPTARG}" == '-Q' || "${OPTARG}" == '-b' || "${OPTARG}" == '-e' || "${OPTARG}" == '-i' || "${OPTARG}" == '-p' || "${OPTARG}" == '-r' ]]; then 
                         OPTIND=$(($OPTIND-1))
                    fi 
                    ;;
                r)  if [[ "${OPTARG}" == '-Q' || "${OPTARG}" == '-b' || "${OPTARG}" == '-e' || "${OPTARG}" == '-i' || "${OPTARG}" == '-p' || "${OPTARG}" == '-a' ]]; then 
                         OPTIND=$(($OPTIND-1))
                    fi
                    ;;
                b) ;;
                e)
                    if test -n "$BASH_VERSION" || [[ "$noecho" == 'y' ]]; then
                        readstr=$(echo "$readstr" | sed 's|read |read -e |g')
                    fi
                    if test -n "$ZSH_VERSION"; then
                        readstr=$(echo "$readstr" | sed 's|vvvvvvvvvv=.*; vared|vvvvvvvvvv="\$(pwd)"; vared|g')
                    fi
                    ;;
                #  Even though it's in the read man for bash, -i (on it's own) does not actually work
                i)
                    arg="$(echo ${OPTARG} | awk '{print $1;}')"
                    args="$(echo ${OPTARG} | sed "s/\<$arg\>//g" | xargs)"

                    local eflag='-e' 

                    [[ "$nostyle" == 'c' ]] && eflag=''

                    if test -n "$BASH_VERSION"; then
                        readstr=$(echo "$readstr" | sed 's|read |read '"$eflag"' -i "'"$arg"'" |g')
                    fi

                    if test -n "$ZSH_VERSION" && [[ $noecho == 'n' ]]; then
                        readstr=$(echo "$readstr" | sed 's|vvvvvvvvvv=.*; vared|vvvvvvvvvv=""; vared -h|g')
                    fi
                    pre="$arg"

                    if test -z "$args"; then 
                        one='y'
                    elif test -n "$args" && ! [[ "$nostyle" == 'c' ]]; then
                        args=$(echo "$args" | awk '{ for (i=NF; i>1; i--) printf("%s ",$i); print $1; }')
                        args=$(echo "$args" | tr ' ' '\n')

                        tmpf=$(mktemp)

                        echo "$args" >"$tmpf"

                        #test -e $HISTFILE &&

                        #! test -e $HISTFILE && test -n $BASH_VERSION && test -f ~/.bash_history && test -n "$(cat ~/.bash_history)" &&
                        #    oldhist=~/.bash_history

                        #if test -n $ZSH_VERSION; then
                        #    if [[ $machine == 'Mac' ]] && test -f ~/.zsh_history && test -n "$(cat ~/.zsh_history)"; then
                        #        oldhist=~/.zsh_history
                        #    elif test -f ~/.zhistory && test -n "$(cat ~/.zhistory)"; then
                        #        oldhist=~/.zhistory
                        #    fi
                        #fi

                        #if ! test -e "$HISTFILE"; then
                        oldhist=$(mktemp)
                        echo -e "$(history | awk '{$1=""; print;}')" > $oldhist
                        #fi

                        if test -n "$BASH_VERSION"; then
                            while IFS='' read -r LINE || [ -n "${LINE}" ]; do
                                history -s "${LINE}"
                            done <"$tmpf"
                            history -c
                            history -r $tmpf
                        fi

                        if test -n "$ZSH_VERSION"; then
                            echo "$arg" >>"$tmpf"

                            while IFS='' read -r LINE || [ -n "${LINE}" ]; do
                                print -S "${LINE}"
                            done <$tmpf
                            # Write to current historyfile
                            fc -W
                            # Then load different one - no need to clear
                            fc -p "$tmpf"
                        fi

                        # https://unix.stackexchange.com/questions/265957/zsh-histfile-still-read-from-zsh-history
                    fi
                    ;;
                Q)
                    if [[ "${OPTARG}" =~ ^[[:upper:]]+$ ]]; then
                        color="${bold}"
                    fi
                    OPTARG=$(echo "${OPTARG}" | awk '{print tolower($0)}')
                    if [[ "${OPTARG}" =~ "red" ]]; then
                        color=$color"${red}"
                    elif [[ "${OPTARG}" =~ "green" ]]; then
                        color=$color"${green}"
                    elif [[ "${OPTARG}" =~ "blue" ]]; then
                        color=$color"${blue}"
                    elif [[ "${OPTARG}" =~ "yellow" ]]; then
                        color=$color"${yellow}"
                    elif [[ "${OPTARG}" =~ "cyan" ]]; then
                        color=$color"${cyan}"
                    elif [[ "${OPTARG}" =~ "magenta" ]]; then
                        color=$color"${magenta}"
                    elif [[ "${OPTARG}" =~ "black" ]]; then
                        color=$color"${black}"
                    elif [[ "${OPTARG}" =~ "white" ]]; then
                        color=$color"${white}"
                    fi
                    ;;
                p)
                    if test -n "$BASH_VERSION"; then
                        
                        if [[ $nostyle == 'y' ]] || ([[ $nostyle == 'f' ]] && [[ $fcomp == 'y' ]]); then 
                           
                            # Removing other styles and colours from prompt using sed
                            # https://stackoverflow.com/questions/58096998/how-to-remove-color-style-format-from-a-variable 
                            
                            local pre="$(echo shopt | grep 'extglob' | awk '{print $2;}')"
                            shopt -s extglob
                            OPTARG="${OPTARG//$'\e'[\[(]*([0-9;])[@-n]/}"
                            readstr=$(echo "$readstr" | sed 's|read |read -p "'"${OPTARG}"'" |g')
                            prmpt="${OPTARG}"

                            [[ "$pre" == 'off' ]] && 
                                shopt -u extglob 
                        
                        elif [[ $nostyle == 'c' ]]; then
                            readstr=$(echo "$readstr" | sed 's|read |read -p "'"${color}${OPTARG}${normal}"'" |g')
                            prmpt="${color}${OPTARG}${normal}"
                        elif test -z "$color"; then
                            readstr=$(echo "$readstr" | sed 's|read |printf "'"${OPTARG}"'\n"; read |g') 
                            prmpt="${OPTARG}"
                        else
                            readstr=$(echo "$readstr" | sed 's|read |printf "'"${color}${OPTARG}${normal}"'\n"; read |g')
                            prmpt="${color}${OPTARG}${normal}"
                        fi
                    fi

                    if test -n "$ZSH_VERSION"; then
                        if [[ $noecho == 'y' ]]; then
                            if test -z "$color"; then
                                readstr=$(echo "$readstr" | sed 's|vvvvvvvvvv|"?'"${OPTARG}"'" vvvvvvvvvv|g') 
                                prmpt="${OPTARG}"
                            else
                                readstr=$(echo "$readstr" | sed 's|vvvvvvvvvv|"?'"${color}${OPTARG}${normal}"'" vvvvvvvvvv|g')
                                prmpt="${color}${OPTARG}${normal}"
                            fi
                        elif test -n "$color"; then
                            readstr=$(echo "$readstr" | sed 's|vared |vared -p "'"${color}${OPTARG}${normal}"'" |g')
                            prmpt="${color}${OPTARG}${normal}"
                        else
                            readstr=$(echo "$readstr" | sed 's|vared |vared -p "'"${OPTARG}"'" |g')
                            prmpt="${OPTARG}"
                        fi
                    fi
                    ;;
                s)
                    readstr=$(echo "$readstr" | sed 's|read |read -s |g')
                    ;;
                *) ;;
            esac
        done

        shift $((OPTIND - 1))

        if [[ "$auto" == 'y' ]] || [[ "$auto" == 'one' && "$one" == 'y' ]]; then
            if test -z "$prmpt"; then
                printf "$pre\n"; 
            else
                printf "$prmpt$pre${normal}\n"; 
                #if test -n "$BASH_VERSION"; then
                #elif test -n "$ZSH_VERSION"; then
                #    printf "${(P)color}$prmpt$prmpt1$pre${normal}\n";   
                #fi
            fi
        
        else 

            local oldtrps="$(trap)"
            
            # https://stackoverflow.com/questions/14702148/how-to-fire-a-command-when-a-shell-script-is-interrupted

            test -n "$BASH_VERSION" &&
                trap "history -c; history -r $oldhist; command rm -f $tmpf; test -n \"$oldtrps\" && eval \"$oldtrps\" || trap - SIGINT; return" SIGINT
            
            test -n "$ZSH_VERSION" &&
               TRAPINT() {
                  fc -IR $oldhist
                  fc -IR
                  command rm -f "$tmpf"
                  return $((128 + $1))
               }

            eval "${readstr}"

            test -n "$BASH_VERSION" &&
                history -c &&
                history -r $oldhist

            test -n "$ZSH_VERSION" &&
                fc -IR $oldhist
                 

            if test -n "$oldtrps"; then
                eval "$oldtrps"
            else
                trap - SIGINT
            fi

            [ -e "$tmpf" ] && command rm -f $tmpf

        fi
        
        if test -n "$pre" && test -z "$vvvvvvvvvv" || [[ "$vvvvvvvvvv" == "" ]]; then
            vvvvvvvvvv="$pre"
        fi
        
        export READE_VALUE="$vvvvvvvvvv"
        export REPLY="$vvvvvvvvvv"

        if [[ -n "$@" ]]; then
            eval "${@:$#:1}='$vvvvvvvvvv'"
        fi
	
    else
        if [[ $# < 1 ]]; then
            echo "Give at least 1 variable up for reade(). "
            echo "- A variable for the return string"
            return 1
        fi

        local breaklines='' tmpf='' frst='' args='' color='' rlwstring="rlwrap --ansi-colour-aware -s 1000 -D 0 -b \"$breaklines\" -o cat"

        while getopts ':a:b:e:i:p:Q:r:s:' flag; do
            case "${flag}" in
                a)  if [[ "${OPTARG}" == '-Q' || "${OPTARG}" == '-b' || "${OPTARG}" == '-e' || "${OPTARG}" == '-i' || "${OPTARG}" == '-p' || "${OPTARG}" == '-r' ]]; then 
                         OPTIND=$(($OPTIND-1))
                    fi 
                    ;;
                r)  if [[ "${OPTARG}" == '-Q' || "${OPTARG}" == '-b' || "${OPTARG}" == '-e' || "${OPTARG}" == '-i' || "${OPTARG}" == '-p' || "${OPTARG}" == '-a' ]]; then 
                         OPTIND=$(($OPTIND-1))
                    fi
                    ;;
                b)
                    breaklines=${OPTARG}
                    ;;
                # File completions
                e) #rlwstring=$(echo $rlwstring | sed "s| -f <(echo \"${args[@]}\") | |g");
                    rlwstring=$(echo $rlwstring | sed "s|rlwrap |rlwrap \-c |g")
                    ;;
                # Pre-filled answer
                i)
                    frst="$(echo ${OPTARG} | awk '{print $1}')"
                    rlwstring=$(echo $rlwstring | sed "s|rlwrap |rlwrap \-P \"$frst\" |g")
                    args=$(echo ${OPTARG} | sed "s|\<$frst\>||g" | xargs)
                    if test -z "$args"; then 
                        one='y' 
                    elif test -n "$args"; then
                        args=$(echo $args | awk '{ for (i=NF; i>1; i--) printf("%s ",$i); print $1; }')
                        args=$(echo $args | tr ' ' '\n')
                        tmpf=$(mktemp)
                        echo "$args" >"$tmpf"
                        rlwstring=$(echo $rlwstring | sed 's| -o cat| \-H $tmpf  \-f <(echo \"${args[@]}\") -o cat|g')
                    fi
                    ;;
                # Prompt
                p)
                    rlwstring=$(echo $rlwstring | sed "s|rlwrap |rlwrap \-S \"${OPTARG}\" |g")
                    prmpt="${OPTARG}"
                    ;;
                # Prompt colours
                Q)
                    rlwstring=$(echo $rlwstring | sed "s|rlwrap |rlwrap \-p${OPTARG} |g")
                    color="${OPTARG}" 
                    ;;
                # Password
                s)
                    rlwstring=$(echo $rlwstring | sed "s|rlwrap |rlwrap \-aEN\"${OPTARG}\" |g")
                    ;;
                *) ;;
            esac
        done

        shift $((OPTIND - 1))

        unset vvvvvvvvvv ${@:$#:1} 

        if [[ "$auto" == 'y' ]] || [[ "$auto" == 'one' && "$one" == 'y' ]]; then
            if test -z "$prmpt"; then
                printf "$frst\n"; 
            else
                if test -n "$BASH_VERSION"; then
                   printf "${!color}$prmpt${normal}$frst\n"; 
                elif test -n "$ZSH_VERSION"; then
                    printf "${(P)color}$prmpt${normal}$frst\n";   
                fi
            fi
            vvvvvvvv=$frst       
        else
            vvvvvvvv="$(eval $rlwstring)"
        fi
        
        export REPLY="$vvvvvvvv"
        export READE_VALUE="$vvvvvvvv"

        ! test $# -eq 0 && eval "${@:$#:1}=$vvvvvvvv"

        command rm $tmpf &>/dev/null
    fi
}
