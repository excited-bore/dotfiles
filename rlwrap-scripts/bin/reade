#!/bin/bash

red=$(tput setaf 1)
red1=$(tput setaf 9)
green=$(tput setaf 2)
green1=$(tput setaf 10)
yellow=$(tput setaf 3)
yellow1=$(tput setaf 11)
blue=$(tput setaf 4)
blue1=$(tput setaf 12)
magenta=$(tput setaf 5)
magenta1=$(tput setaf 13)
cyan=$(tput setaf 6)
cyan1=$(tput setaf 14)
white=$(tput setaf 7)
white1=$(tput setaf 15)
black=$(tput setaf 16)
grey=$(tput setaf 8)

RED=$(tput setaf 1 && tput bold)
RED1=$(tput setaf 9 && tput bold)
GREEN=$(tput setaf 2 && tput bold)
GREEN1=$(tput setaf 10 && tput bold)
YELLOW=$(tput setaf 3 && tput bold)
YELLOW1=$(tput setaf 11 && tput bold)
BLUE=$(tput setaf 4 && tput bold)
BLUE1=$(tput setaf 12 && tput bold)
MAGENTA=$(tput setaf 5 && tput bold)
MAGENTA1=$(tput setaf 13 && tput bold)
CYAN=$(tput setaf 6 && tput bold)
CYAN1=$(tput setaf 14 && tput bold)
WHITE=$(tput setaf 7 && tput bold)
WHITE1=$(tput setaf 15 && tput bold)
BLACK=$(tput setaf 16 && tput bold)
GREY=$(tput setaf 8 && tput bold)

bold=$(tput bold)
underline_on=$(tput smul)
underline_off=$(tput rmul)
bold_on=$(tput smso)
bold_off=$(tput rmso)
half_bright=$(tput dim)
reverse_color=$(tput rev)

# Reset
normal=$(tput sgr0)

# Broken !! (Or im dumb?)
blink=$(tput blink)
underline=$(tput ul)
italic=$(tput it)
 
VERSION='1.0' 

unset READE_VALUE

hlpstr="${bold}reade${normal} [ -h/--help ] [ -v/--version] [ -i/--pregiven PREGIVEN ] [ -e/--file-completion ]  [ -s/--no-echo ] [ -p/--prompt PROMPTSTRING ] [ -Q/--colour COLOURSTRING ] [ -b/--break-chars BREAKCHARS-STRING ] ${bold}CHOICES-STRING${normal}  ${bold}returnvar${normal}\n
Simplifies prompt for ${bold}read/rlwrap${normal}: Will use 'rlwrap' if it is installed, otherwise resorts to 'read' 
Takes at least one argument, otherwise will prompt help page.

Any pre-given choice can be toggled between using the ${bold}up${normal} and ${bold}down${normal} arrow keys

Supply at least 1 variable: 

- The last argument - a variable to put the prompt response in. If no variable is supplied, the returned value will be in the '\$REPLY' and '\$READE_VALUE'. 

-h, --help  
    
    Print this text and exit

-v, --version  
    
    Print version and exit

-Q ${underline_on}Colour${underline_off}

    Use  one  of  the  colour names black, red, green, yellow, blue, cyan, purple (=magenta) or white, or an ANSI-conformant <colour_spec> to colour any prompt displayed  by  command.\n An uppercase colour name (Yellow or YELLOW ) gives a bold prompt.\n Prompts that already contain (colour) escape sequences or one of the readline \"ignore markers\" (ASCII 0x01 and 0x02) are not coloured.

-i, --pre-given ${underline_on}PREGIVEN(S) - SPACESEPERATED WORD STRING${underline_off} 

    Autofill prompt with 'PREGIVEN' - must come in the form of a string (only works when rlwrap is installed) and every WORD needs to be space-separated. Only the first will be show at first, the others will be selectable with autocompletion/arrowkeys in the order they were given ${bold}if rlwrap is installed${normal} 

-s, --no-echo 

    Doesn't echo what's being typed to the terminal - usefull for password prompts and the like

-e, --file-completion 

    Use filecompletions. 
    Will stop using rlwrap if it is installed because 'rlwrap' doesn't properly add slashed before spaces in filenames/directorynames and will use 'read -e' which does properly do this instead

-b ${underline_on}list_of_characters${underline_off} 

   (From rlwrap manual) Consider  the specified characters word-breaking (whitespace is always word-breaking). This determines what is considered a \"word\", both when completing and when building a completion word list from files specified by -f options following (not preceding!) it.\n Default list (){}[],'+-=&^%%\$#@\";|\ \n Unless -c is specified, / and . (period) are included in the default list\n\n" 

while :; do
    case $1 in
      ''|-h|-\?|--help)
          printf "$hlpstr" 
          exit 1
      ;;
      -v|--version) 
         printf "${bold}Version${normal} : $VERSION\n"
         exit 1
      ;; 
      # Otherwise 
      *) break 
      ;;
   esac
done && OPTIND=1;

#https://stackoverflow.com/questions/12022592/how-can-i-use-long-options-with-the-bash-getopts-builtin

for arg in "$@"; do
  shift
  case "$arg" in
    '--break-chars')       set -- "$@" '-b'   ;;
    '--colour')            set -- "$@" '-Q'   ;;
    '--prompt')            set -- "$@" '-p'   ;;
    '--file-completions')  set -- "$@" '-e'   ;;
    '--pre-given')         set -- "$@" '-i'   ;;
    '--no-echo')           set -- "$@" '-s'   ;;
    *)                     set -- "$@" "$arg" ;;
  esac
done 


while getopts ':b:e:i:p:Q:s:S:' flag; do
    case "${flag}" in
        e)  fcomp='y'
            break 
            ;;

        *)  fcomp='n'
            break 
            ;;
    esac
done && OPTIND=1;
bash_rlwrap='y'
if [[ $(uname -s) =~ 'MINGW' ]] && ! type pacman &> /dev/null; then
    bash_rlwrap='n'
fi
 
if ! type rlwrap &> /dev/null || test "$fcomp" == 'y' || test "$bash_rlwrap" == 'n' ; then
    readstr="read -r "
    color=""
    OLD_HISTFILE=$HISTFILE
    while getopts ':b:e:i:p:Q:s:S:' flag; do
        case "${flag}" in
            b)  ;;
            e)  readstr=$(echo "$readstr" | sed 's|read |read -e |g');
                ;;
                #  Even though it's in the read man, -i does not actually work
            i)  arg="$(echo ${OPTARG} | awk '{print $1;}')"
                args="$(echo ${OPTARG} | sed "s/\<$frst\> //g")"  
                readstr=$(echo "$readstr" | sed 's|read |read -e -i "'"$arg"'" |g');
                pre="$arg"
                ! test -z "$args" &&   
                args=$(echo $args | awk '{ for (i=NF; i>1; i--) printf("%s ",$i); print $1; }') &&
                args=$(echo $args | tr ' ' '\n') &&
                tmpf=$(mktemp) && 
                echo "$args" > "$tmpf" && 
                export HISTFILE=$tmpf
                ;;
            Q)  if [[ "${OPTARG}" =~ ^[[:upper:]]+$ ]]; then
                    color="${bold}"
                fi
                OPTARG=$(echo ${OPTARG} | awk '{print tolower($0)}')
                if [[ "${OPTARG}" =~ "red" ]]; then
                    color=$color"${red}"
                elif [[ "${OPTARG}" =~ "green" ]]; then
                    color=$color"${green}"
                elif [[ "${OPTARG}" =~ "blue" ]]; then
                    color=$color"${blue}"
                elif [[ "${OPTARG}" =~ "yellow" ]]; then
                    color=$color"${yellow}"
                elif [[ "${OPTARG}" =~ "cyan" ]]; then
                    color=$color"${cyan}"
                elif [[ "${OPTARG}" =~ "magenta" ]]; then
                    color=$color"${magenta}"
                elif [[ "${OPTARG}" =~ "black" ]]; then
                    color=$color"${black}"
                elif [[ "${OPTARG}" =~ "white" ]]; then
                    color=$color"${white}"
                fi
                ;;
            p)  if test -z "$color"; then
                    readstr=$(echo "$readstr" | sed 's|read |printf "'"${OPTARG}"'\n"; read |g');
                else
                    readstr=$(echo "$readstr" | sed 's|read |printf "'"${color}${OPTARG}${normal}"'\n"; read |g');
                fi
                ;;
            s)  readstr=$(echo "$readstr" | sed 's|read |read -s "'"${OPTARG}"'" |g');
                ;;
            S)  ;;
        esac
    done;

    shift $((OPTIND-1)) 
   
    eval "${readstr} value";

    if test "$fcomp" == 'y'; then
        echo $value >> $HISTFILE 
        history -n
    fi

    if ! test -z "$pre" && test -z "$value" || test "$value" == ""; then
        value="$pre"  
    fi

    export READE_VALUE="$value"
    export REPLY="$value" 

    if ! test -z "$@"; then
        eval "${@:$#:1}=$value"  
    fi

    unset fcomp

else
    if [[ $# < 1 ]]; then
        echo "Give at least 1 variable up for reade(). "
        echo "- A variable for the return string"
        exit 1
    fi

    breaklines=''

    #args="${@:$#-1:1}"

    ## Reverse wordlist order (last -> first) because ???
    #args=$(echo $args | awk '{ for (i=NF; i>1; i--) printf("%s ",$i); print $1; }')
    #args=$(echo $args | tr ' ' '\n')

    tmpf=''
    rlwstring="rlwrap --ansi-colour-aware -s 1000 -D 0 -b \"$breaklines\" -o cat"

    while getopts ':b:e:i:p:Q:s:S:' flag; do
        case "${flag}" in
            b)  breaklines=${OPTARG};
            ;;
            # File completions
            e)  #rlwstring=$(echo $rlwstring | sed "s| -f <(echo \"${args[@]}\") | |g");
                rlwstring=$(echo $rlwstring | sed "s|rlwrap |rlwrap \-c |g");
            ;;
            # Pre-filled answer
            i)  frst="$(echo ${OPTARG} | awk '{print $1}')"  
                rlwstring=$(echo $rlwstring | sed "s|rlwrap |rlwrap \-P \"$frst\" |g");
                args=$(echo ${OPTARG} | sed "s|\<$frst\> ||g") 
                ! test -z "$args" &&
                args=$(echo $args | awk '{ for (i=NF; i>1; i--) printf("%s ",$i); print $1; }') &&
                args=$(echo $args | tr ' ' '\n') &&
                tmpf=$(mktemp) && 
                echo "$args" > "$tmpf" && 
                rlwstring=$(echo $rlwstring | sed 's| -o cat| \-H $tmpf  \-f <(echo \"${args[@]}\") -o cat|g') 
            ;;
            # Prompt
            p) rlwstring=$(echo $rlwstring | sed "s|rlwrap |rlwrap \-S \"${OPTARG}\" |g");
            ;;
            # Prompt colours
            Q)  rlwstring=$(echo $rlwstring | sed "s|rlwrap |rlwrap \-p${OPTARG} |g");
            ;;
            # Password
            s)  rlwstring=$(echo $rlwstring | sed "s|rlwrap |rlwrap \-aN\"${OPTARG}\" |g");
            ;;
            # Always echo *** w/ passwords
            S)  rlwstring=$(echo $rlwstring | sed "s|rlwrap |rlwrap \-E\"${OPTARG}\" |g");
            ;;
        esac
    done;

    shift $((OPTIND-1)) 

    value="$(eval $rlwstring)";
    command rm $tmpf &> /dev/null;

    export READE_VALUE="$value" 
    export REPLY="$value" 

    if ! test $# -eq 0; then
        eval "${@:$#:1}=$value" 
    fi
     
fi
unset bash_rlwrap 
