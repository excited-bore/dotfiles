#!/bin/bash

# Get script dir when sourced

if test -z $ZSH_VERSION; then
    SCRIPT_DIR=$( builtin cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
else
    SCRIPT_DIR="${0:A:h}"
fi

! test -f $SCRIPT_DIR/reade && ! test -f $SCRIPT_DIR/01-reade.sh &&
    printf "'reade' needs to be in the same folder as 'yes-edit-no' for it to work\n" ||
    test -f $SCRIPT_DIR/reade && source $SCRIPT_DIR/reade ||
    test -f $SCRIPT_DIR/01-reade.sh && source $SCRIPT_DIR/01-reade.sh &>/dev/null

! test -f $SCRIPT_DIR/readyn && ! test -f $SCRIPT_DIR/02-readyn.sh &&
    printf "'readyn' needs to be in the same folder as 'yes-edit-no' for it to work\n" ||
    test -f $SCRIPT_DIR/readyn && source $SCRIPT_DIR/readyn ||
    test -f $SCRIPT_DIR/02-readyn.sh && source $SCRIPT_DIR/02-readyn.sh &>/dev/null

function yes-edit-no() {

    ! test -z $ZSH_VERSION &&
        #emulate sh &&
        #setopt KSH_ARRAYS
        setopt err_return extended_glob local_options local_traps

    local red=$(tput sgr0 && tput setaf 1)
    local red1=$(tput sgr0 && tput setaf 9)
    local orange=$(tput sgr0 && tput setaf 166)
    local green=$(tput sgr0 && tput setaf 2)
    local green1=$(tput sgr0 && tput setaf 10)
    local yellow=$(tput sgr0 && tput setaf 3)
    local yellow1=$(tput sgr0 && tput setaf 11)
    local blue=$(tput sgr0 && tput setaf 4)
    local blue1=$(tput sgr0 && tput setaf 12)
    local magenta=$(tput sgr0 && tput setaf 5)
    local magenta1=$(tput sgr0 && tput setaf 13)
    local cyan=$(tput sgr0 && tput setaf 6)
    local cyan1=$(tput sgr0 && tput setaf 14)
    local white=$(tput sgr0 && tput setaf 7)
    local white1=$(tput sgr0 && tput setaf 15)
    local black=$(tput sgr0 && tput setaf 16)
    local grey=$(tput sgr0 && tput setaf 8)

    local RED=$(tput setaf 1 && tput bold)
    local RED1=$(tput setaf 9 && tput bold)
    local ORANGE=$(tput setaf 166 && tput bold)
    local GREEN=$(tput setaf 2 && tput bold)
    local GREEN1=$(tput setaf 10 && tput bold)
    local YELLOW=$(tput setaf 3 && tput bold)
    local YELLOW1=$(tput setaf 11 && tput bold)
    local BLUE=$(tput setaf 4 && tput bold)
    local BLUE1=$(tput setaf 12 && tput bold)
    local MAGENTA=$(tput setaf 5 && tput bold)
    local MAGENTA1=$(tput setaf 13 && tput bold)
    local CYAN=$(tput setaf 6 && tput bold)
    local CYAN1=$(tput setaf 14 && tput bold)
    local WHITE=$(tput setaf 7 && tput bold)
    local WHITE1=$(tput setaf 15 && tput bold)
    local BLACK=$(tput setaf 16 && tput bold)
    local GREY=$(tput setaf 8 && tput bold)

    local bold=$(tput bold)
    local underline_on=$(tput smul)
    local underline_off=$(tput rmul)
    local standout_on=$(tput smso)
    local standout_off=$(tput rmso)
    local half_bright=$(tput dim)
    local reverse_color=$(tput rev)

    # Reset
    local normal=$(tput sgr0)

    # Broken !! (Or im dumb?)
    local blink=$(tput blink)
    local underline=$(tput ul)
    local italic=$(tput it)

    local VERSION='2.0'
   
    # [ -o/--other COMMAND, PROMPTDESCRIPTION [, REPLACEEDIT (${bold}1${normal}/0)]]
    #
    #        
    #    -o, --other COMMAND, PROMPTDESCRIPTION [, REPLACEEDIT (${bold}1${normal}/0)], [[ FIRST (${bold}0${normal}/1)]]
    #        Supply another kind of command other then 'edit' to perform together with the description of what's supposed to be done in string format as to be added to the prompt as long as -d/--dont-add-prompt is not supplied. There's a last option not to replace edit with this new command
    #        Precedes every other option if the 4th option is 'y'

    #        For example: 'yes-edit-no --other=less,\"pager\",n' would add '[${bold}Y(es)${normal}/n(o)/e(dit)/p(ager)]: ' to the prompt and use less if 'p' was given'

    #    -O, --other-colour [ ${underline_on}COLOUR${underline_off} ] 

    #        Default: ${YELLOW}YELLOW${normal}


    local hlpstr="${bold}YES-EDIT-NO${normal} [ -h/--help ] [ -v/--version] [ -d/--dont-askagain (${bold}1${normal}/0) ] [ -y/--yes [ PREFILL [, PREFILLPROMPT ]] [ -Y/--yes-colour [ COLOUR ]] [ -n/--no [ PREFILL [, PREFILLPROMPT ]] [ -N/--no-colour [ COLOUR ]] [ -e/--edit [ PREFILL [, PREFILLPROMPT ]] [ -E/--editor EDITOR ] [ -e/--editor EDITOR ] [ -Q/--edit-colour COLOURSTRING ] [ -p/--prompt PROMPTSTRING ] [ -d/--dont-askagain YES/NOPROMPT (${bold}1${normal}/0) ]  [ -f/--function FUNCTION ] [ -c/--condition CONDITION ] [ -r / --read-no-style [ NOCOMP (${bold}0${normal}/1) ] [ -b/--break-chars BREAKCHARS-STRING ] [ -g/--files-to-edit SPACESEPERATED-FILESTRING ] ${bold}SPACESEPARATED FILE(S)STRING${normal} ${bold}RETURNVAR${normal}

        yes-edit-no version $VERSION

        Simplifies prompt for ${bold}read/rlwrap${normal} specifically for when file(s) need to be reviewed before installation 
        - repeats prompt as long neither 'yes' nor 'no' is chosen 
        - Relies on 'reade' and 'readyn' (and preferably rlwrap) being installed

        Needs at least 2 parameters.
        1) File(s) to edit/use commands on (if -g/--files-to-edit is not used yet)
        2) Returnvar (only necessary if -f/--function is not used), will contain at default 'yes' or 'no' ('edit' also except if -d/--dont-askagain is supplied) 
        
        Adding prompt using -p/--prompt is heavily recommended. Adds '[Y(es)/n(o)/e(dit)[/o(ther)]]: ' afterward) 
       
        -h, --help  
            
            Print this text and exit

        -v, --version  
            
            Print version and exit

        -d, --dont-askagain (${bold}1${normal}/0) 

            Normally after prompted once and edit is chosen, it will repeat the prompt (while showing the diffs if edited). With -d, --dont-askagain it will ask one last yes/no question and then quit (and if -f/--function is not empty, it will execute said function if yes is answered)
            It takes the optional string argument of what is pregiven with this second question: '1' (Default) - 'yes' or '0' - 'no'.
            f.ex. yes-edit-no --dont-askagain 0

        -y, --yes [ ${underline_on}prefill${underline_off} ], [[ ${underline_on}prefill-prompt${underline_off} ]] 
           
            What's the first prefilled and first in the string that's highlighted in bold at the end of the prompt? (this would be nullified if -d,--dont-ask-prompt is supplied) 
             
            Set to 'Yes' prompt with 2 optional, comma-separated arguments 
            Pregiven is 'y' without argument, otherwise first becomes pregiven. This is the default. 
            Second optional is the prefill word in coloured prompt ([Word]), otherwise defaults to '${GREEN}[${underline_on}Y${underline_off}(es)/${underline_on}e${underline_off}(dit)/${underline_on}n${underline_off}(o)]:${normal} '

        -Y, --yes-colour ${underline_on}COLOUR${underline_off}
            
            Default: ${GREEN}GREEN${normal} 

            Only active if --yes(Default)/--no applicable. 
            Use  one  of  the  colour names black, red, green, yellow, blue, cyan, purple (=magenta) or white, or an ANSI-conformant <colour_spec> to colour any prompt displayed  by  command.\n\tAn uppercase colour name (Yellow or YELLOW ) gives a bold prompt.\n Prompts that already contain (colour) escape sequences or one of the readline \"ignore markers\" (ASCII 0x01 and 0x02) are not coloured. 

        -n, --no [ ${underline_on}prefill${underline_off} ], [[ ${underline_on}prefill-prompt${underline_off} ]] 
            Same as for --yes but 'no' variant
            Default pregiven is 'n', prompt word in prompt defaults to '${ORANGE}[${underline_on}N${underline_off}(o)/${underline_on}e${underline_off}(dit)/${underline_on}y${underline_off}(es)]: ${normal}' when only '--no' is supplied
        
        -N, --no-colour ${underline_on}COLOUR${underline_off}
            
            Default: ${ORANGE}ORANGE${normal} 
        
        -e, --edit [ ${underline_on}prefill${underline_off} ], [[ ${underline_on}prefill-prompt${underline_off} ]] 
            Same as for --yes but 'edit' variant
            Default pregiven is 'e', prompt word in prompt defaults to '${YELLOW}[${underline_on}E${underline_off}(dit)/${underline_on}y${underline_off}(es)/${underline_on}n${underline_off}(o)]: ${normal}' when only '--edit' is supplied
            If '--no' with '--edit' are active => '${ORANGE}[${underline_on}E${underline_off}(dit)/${underline_on}n${underline_off}(o)/${underline_on}y${underline_off}(es)]: ${normal}' 
            '--edit' precedes everything 
            If neither '--no', '--edit' or '--yes' are active => yes-prompt 
            
        -E, --editor EDITOR  
         
            What editor to use. Looks at \$EDITOR if not given, otherwise will look whether nvim, vim, nano or vi exists. 

        -Q, --edit-colour [ ${underline_on}COLOUR${underline_off} ] 

            Default: ${YELLOW}YELLOW${normal} 

        
        -c, --condition ${underline_on}CONDITION${underline_off} 

            Set the prefix to '${GREEN}[${underline_on}Y${underline_off}(es)/${underline_on}e${underline_off}(dit)/${underline_on}n${underline_off}(o)]: ${normal}' only if the given condition is true,
            otherwise will set to '${ORANGE}[${underline_on}N${underline_off}(o)/${underline_on}e${underline_off}(dit)/${underline_on}y${underline_off}(es)]: ${normal}'

        -g, --files-to-edit SPACESEPERATED-FILESTRING 
         
            String with space separated filenames (if not given, expected as in spaceseparated stringform before RETURNVAR)

        -f, --function FUNCTION
            
            If supplied, no returnvar will be given but instead the supplied function will be executed when 'yes' is prompted.   

        -p, --prompt PROMPTSTRING 
             
            String to be given as prompt. At default something along the lines of '[${bold}Y(es)${normal}/n(o)/e(dit)]: ' will be added at the end of the prompt if -d/--dont-add-prompt is not supplied. 
            This last part will also be shown in the colour/style supplied by -Q/--colour.

        -P, --dont-add-prompt

            At default something along the lines of '[${bold}Y(es)${normal}/n(o)/e(dit)]: ' will be added at the end of the prompt. With this option, that won't be the case.

        -r, --read-no-style [ NOCOMP - ${bold}'0'${normal}/'1' ] 

            This will stop read from using ${GREEN}colors${normal}/${bold}${underline_on}styles${normal} when applied.
        
            As read is pretty archaic and has been broken for a while, having a colorized 'read -p' prompt that uses prefixes/autocomp while obtaining bashhistory from readline using the '-e' flag can be problematic because cycling enough times through the given options will cause part of the option to 'stick' to the prompt - essentially breaking the prompt.
            This is why most reade/yes-edit-no colorized prompts have their autocompletion underneath the prompt when rlwrap is not installed - - it uses 'printf PROMPT' instead of using 'read -p PROMPT' 
            (!! ${bold}even when no color is supplied, since color/style can still supplied as a part of a given prompt so this is suspected${normal} !!). 
            
            This flag ${bold}${underline_on}mitigates that${normal}, which will remove all applied colors/styles and thus mitigate the need to avoid using 'read -p' 
            (with an extra style removing check on the supplied prompt to make sure no style is passed).
            
            No option will set never set a style
            Nocomp (optional) can be one '0' (Default) or '1'. 
            If set it will ${bold}not${normal} remove colors/styles but will instead read will opt to never use multiple autocompletion (to avoid moving arrowkeys up and down breaking prompts) ${bold}apart from the first pregiven/prefix ${underline_on}which will be returned if flag is supplied and answer is empty${normal} 

            There's also a environment variable READE_NOSTYLE that can be set beforehand with options: 'true', 'false', 'nocomp', 'filecomp-only'
            This flag will preceed the option set with READE_NOSTYLE.
            Yes-edit-no will ignore READE_NOSTYLE when set to 'filecomp-only'

        -b ${underline_on}LIST_OF_CHARACTERS${underline_off} 

           (From rlwrap manual) Consider  the specified characters word-breaking (whitespace is always word-breaking). This determines what is considered a \"word\", both when completing and when building a completion word list from files specified by -f options following (not preceding!) it.\n Default list (){}[],'+-=&^%%\$#@\";|\ \n Unless -c is specified, / and . (period) are included in the default list

            ${bold}( This option is kind of broken )${bold}\n\n${normal}"

    while :; do
        case $1 in
        '' | -h | -\? | --help)
            printf "$hlpstr"
            return 0
            ;;
        -v | --version)
            printf "${bold}Version${normal} : $VERSION\n"
            return 0
            ;;
        # Otherwise
        *)
            break
            ;;
        esac
    done && OPTIND=1

    #https://stackoverflow.com/questions/12022592/how-can-i-use-long-options-with-the-bash-getopts-builtin

        #'--other')              set -- "$@" '-o' ;;
        #'--other-colour')       set -- "$@" '-O' ;;
    for arg in "$@"; do
        shift 
        case "$arg" in
        '--condition')          set -- "$@" '-c' ;;
        '--dont-askagain')      set -- "$@" '-d' ;;
        '--yes')                set -- "$@" '-y' ;;
        '--yes-colour')         set -- "$@" '-Y' ;;
        '--no')                 set -- "$@" '-n' ;;
        '--no-colour')          set -- "$@" '-N' ;;
        '--edit')               set -- "$@" '-e' ;;
        '--editor')             set -- "$@" '-E' ;;
        '--edit-colour')        set -- "$@" '-Q' ;;
        '--function')           set -- "$@" '-f' ;;
        '--files-to-edit')      set -- "$@" '-g' ;;
        '--prompt')             set -- "$@" '-p' ;;
        '--dont-add-prompt')    set -- "$@" '-P' ;;
        '--read-no-style')      set -- "$@" '-r' ;; 
        '--break-chars')        set -- "$@" '-b' ;;
        *)                      set -- "$@" "$arg" ;;
        esac
    done && OPTIND=1

    if [[ -z "$1" ]] || [[ -z "$2" ]]; then
        printf "yes-edit-no needs at least 2 parameters.
        1) String with seperated file(s) to edit/use commands on (if -g/--files-to-edit is not used yet)
        2) Returnvar (if 'yes/no' is passed - only necessary if -f/--function is not used)\n"
        return 1
    else
        local pre="y"
        local choices=("y" "e" "n")
        local choicesp=("y(es)" "e(dit)" "n(o)")
        local condition='' 
        local prmpt=''
        local prmpt1=''
        local yflag="y" 
        local nflag="" 
        local eflag="" 
        local oflag=""
        local ofirst=''
        local YES_NO_EDITOR="$EDITOR"
        local editreplaced='n'
        local ycolor="GREEN" 
        local ncolor="ORANGE" 
        local ecolor="YELLOW" 
        local color=''
        local first=''
        #local othercmd=''
        #local other=''
        #local ocolor="YELLOW"
        local noprompt=''
        local nostyle=""
        local norepeat=''
        local functn=""
        local files=""

        while getopts 'Pynerb:c:d:y:Y:n:N:e:E:Q:g:f:p:r:' flag; do
            case "${flag}" in
            b) ;;
            c)  
                if [[ "${OPTARG}" ]] && ! [[ "${OPTARG}" == '--' ]] && ! [[ ${OPTARG} =~ ^-.* ]]; then
                    condition="${OPTARG}"
                fi 
                if [[ ${OPTARG} =~ ^-.* ]]; then
                    OPTIND=$(($OPTIND - 1)) 
                fi 
                ;; 
            d)
                if ! [[ ${OPTARG} ]]; then
                    norepeat='n'
                else
                    norepeat='y'
                fi
                [[ ${OPTARG} =~ ^-.* ]] && OPTIND=$(($OPTIND - 1))
                ;;
           y)  
                 local args='' 
                 yflag='y'
                 if [[ "${OPTARG}" ]] && ! [[ "${OPTARG}" == '--' ]] && ! [[ ${OPTARG} =~ ^-.* ]]; then

                   # disable glob 
                   set -f 

                   # split on space characters 
                   IFS=',' 
 
                   args=($OPTARG);
                   if test -n "$BASH_VERSION"; then
                        test -n "${args[0]}" && 
                            yflag="${args[0]}" &&
                            choices[0]="${args[0]}"
                        test -n "${args[1]}" && 
                            choicesp[0]="${args[1]}"
                   fi

                   if test -n "$ZSH_VERSION"; then
                        test -n "${args[1]}" && 
                            yflag="${args[1]}" &&
                            choices[1]="${args[1]}"
                        test -n "${args[2]}" && 
                            choicesp[1]="${args[2]}" 
                   fi
                else
                    if [[ ${OPTARG} =~ -.* ]]; then
                        OPTIND=$(($OPTIND - 1)) 
                    fi
                fi
                ;;
             n)  
                 local args='' 
                 nflag='n'
                 if [[ "${OPTARG}" ]] && ! [[ "${OPTARG}" == '--' ]] && ! [[ ${OPTARG} =~ ^-.* ]]; then
                   # disable glob 
                   set -f 

                   # split on space characters 
                   IFS=',' 
 
                   args=($OPTARG);
                   if test -n "$BASH_VERSION"; then
                        test -n "${args[0]}" && 
                            nflag="${args[0]}" && 
                            choices[1]="${args[0]}"  
                        test -n "${args[1]}" && 
                            choicesp[1]="${args[1]}"
                   fi

                   if test -n "$ZSH_VERSION"; then
                        test -n "${args[1]}" && 
                            nflag="${args[1]}" && 
                            choices[2]="${args[1]}" 
                        test -n "${args[2]}" && 
                            choicesp[2]="${args[2]}" 
                   fi
                else
                    if [[ ${OPTARG} =~ -.* ]]; then
                        OPTIND=$(($OPTIND - 1)) 
                    fi
                fi
                ;;
            e)  
                 local args='' 
                 eflag='e'
                 if [[ "${OPTARG}" ]] && ! [[ "${OPTARG}" == '--' ]] && ! [[ ${OPTARG} =~ ^-.* ]]; then

                   # disable glob 
                   set -f 

                   # split on space characters 
                   IFS=',' 
 
                   args=($OPTARG);
                   if test -n "$BASH_VERSION"; then
                        test -n "${args[0]}" &&
                            eflag="${args[0]}" &&
                            choices[2]="${args[0]}"
                        test -n "${args[1]}" && 
                            choicesp[2]="${args[1]}"
                   fi
                   if test -n "$ZSH_VERSION"; then
                        test -n "${args[1]}" &&
                            eflag="${args[1]}" &&
                            choices[3]="${args[1]}" 
                        test -n "${args[2]}" && 
                            choicesp[3]="${args[2]}" 
                   fi
                else
                    if [[ ${OPTARG} =~ -.* ]]; then
                        OPTIND=$(($OPTIND - 1)) 
                    fi
                fi
                ;;
     #       o)
     #           local j=0
     #           oflag='o'
     #           for i in $(echo ${OPTARG} | sed "s/,/ /g"); do
     #               if [[ $j == 0 ]]; then
     #                   othercmd="$i"
     #               elif [[ $j == 1 ]] && test -z "$noprompt"; then
     #                   if test -z "$i"; then
     #                       printf "'-o/--other' takes 2 positional arguments: 
     #                                   1) the name of the command
     #                                   2) the action performed to portray in the prompt (like 'pager')\n"
     #                       return 0
     #                   fi
     #                   other="$i"
     #                   first=$(echo $other | cut -c1-1)
     #                   oflag="$first"
     #                   choices+=("$first")
     #                   # Bless this post, how did I not know about `` in bash beforehand ???
     #                   # https://stackoverflow.com/questions/27791251/get-first-character-of-a-string-shell
     #                   choicesp+=("$first("$(cut -d "$first" -f2- <<<$other)")")
     #               #elif [[ $j == 2 ]] && [[ "$i" == '1' ]]; then
     #               #    YES_NO_EDITOR="$othercmd"
     #               #    editreplaced='y'
     #               #    if [[ "${choices[*]}" =~ "e" ]]; then
     #               #        test -n "$BASH_VERSION" && unset ${choices[2]} 
     #               #        test -n "$ZSH_VERSION" && unset ${choices[3]}
     #               #    fi
     #               #    if [[ "${choicesp[*]}" =~ "e(dit)" ]]; then
     #               #        test -n "$BASH_VERSION" && unset ${choices[2]}
     #               #        test -n "$ZSH_VERSION" && unset ${choices[3]}
     #               #    fi
     #               elif [[ $j == 3 ]] && test -n "$i"; then
     #                   ofirst='y' 
     #               fi
     #               echo $i $j && j=$(($j+1)) 
     #           done
     #           unset j i
     #           [[ ${OPTARG} =~ ^-.* ]] && OPTIND=$(($OPTIND - 1))
     #           ;;
                
             Y) if [ -n "${OPTARG}" ] && ! [[ "${OPTARG}" == '--' ]] && ! [[ ${OPTARG} =~ ^-.* ]]; then 
                    ycolor="${OPTARG}";
                fi
                if [[ ${OPTARG} =~ ^-.* ]]; then
                    OPTIND=$(($OPTIND - 1)) 
                fi
                ;;    
             N) if [[ "${OPTARG}" ]] && ! [[ "${OPTARG}" == '--' ]] && ! [[ ${OPTARG} =~ ^-.* ]]; then
                    ncolor="${OPTARG}";
                fi
                if [[ ${OPTARG} =~ ^-.* ]]; then
                    OPTIND=$(($OPTIND - 1)) 
                fi 
                ;;
            E) test -z "${OPTARG}" &&
                    printf "The flag -E/--editor requires an argument, namely an editor name\n" &&
                    return 0 ||
                    YES_NO_EDITOR="${OPTARG}"
                ;;
            Q) if [[ "${OPTARG}" ]] && ! [[ "${OPTARG}" == '--' ]] && ! [[ ${OPTARG} =~ ^-.* ]]; then
                    ecolor="${OPTARG}";
                fi
                if [[ ${OPTARG} =~ ^-.* ]]; then
                    OPTIND=$(($OPTIND - 1)) 
                fi 
                ;; 
            O) if [[ "${OPTARG}" ]] && ! [[ "${OPTARG}" == '--' ]] && ! [[ ${OPTARG} =~ ^-.* ]]; then
                    ocolor="${OPTARG}";
                fi
                if [[ ${OPTARG} =~ ^-.* ]]; then
                    OPTIND=$(($OPTIND - 1)) 
                fi
                ;;
            f)
                test -z "${OPTARG}" &&
                    printf "This flag requires a function to call back to if 'yes' is given at a certain point\n" &&
                    return 0 ||
                    functn="${OPTARG}"
                ;;
            p)
                prmpt="${OPTARG}"
                ;;
            P) 
                noprompt='y'
                ;;
                  
            r) nostyle='-r' 
               if [[ ${OPTARG} ]]; then
                   nostyle="-r 'nocomp'"
               fi
               ;;
            g)
                test -z "${OPTARG}" &&
                    printf "This flag requires a string with files to edit/review\n" &&
                    return 0 ||
                    files="${OPTARG[@]}"
                ;;
            esac
        done

        shift $((OPTIND - 1))

        if test -z "$files"; then
            if [[ $# -eq 1 ]] || [[ $# -gt 1 ]]; then
                ! test -z "$functn" && [[ $# -gt 1 ]] && files="${@:$#:2}" ||
                    [[ $# -eq 1 ]] && files="${@:$#:1}"
            else
                printf "String with seperated file(s) to edit/use commands on (if -g/--files-to-edit has not been given\n Exiting\n"
                return 0
            fi
        fi

        if test -z "$YES_NO_EDITOR"; then
            if type nvim &>/dev/null; then
                YES_NO_EDITOR='nvim'
            elif type vim &>/dev/null; then
                YES_NO_EDITOR='vim'
            elif type nano &>/dev/null; then
                YES_NO_EDITOR='nano'
            elif type vi &>/dev/null; then
                YES_NO_EDITOR='vi'
            fi
        fi

        if test -z "$noprompt"; then

            if test -n "$BASH_VERSION"; then 
            
                # Bash variant - list arrays
                local i=0
                #local o op 
                #[ -n "$oflag" ] && o="${choices[3]}" && op="${choicesp[3]}"
                if [ -n "$yflag" ]; then
                    i=0 
                    color="$ycolor"
                fi 
                if [ -n "$nflag" ] || (test -n "$condition" && ! eval "${condition}"); then 
                    nflag='n'
                    color="$ncolor"
                    i=0 
                    choices=("${choices[2]}" "${choices[1]}" "${choices[0]}") 
                    choicesp=("${choicesp[2]}" "${choicesp[1]}" "${choicesp[0]}" )
                fi 
                if [ -n "$eflag" ] || ([[ $editreplaced == 'y' ]] && [ -n $oflag]); then
                    color=$ecolor
                    i=0
                    #if test -n "$nflag"; then
                        choices=(${choices[1]} "${choices[0]}" "${choices[2]}") 
                        choicesp=(${choicesp[1]} "${choicesp[0]}" "${choicesp[2]}") 
                    #else
                    #    choices=(${choices[1]} "${choices[0]}" "${choices[2]}")
                    #    choicesp=(${choicesp[1]} "${choicesp[0]}" "${choicesp[2]}")
                    #fi
                fi 
                #if [ -n "$oflag" ] && [[ $editreplaced == 'n' ]]; then 
                #    i=3 
                #    color=$ocolor
                #fi 

                prmpt1=" ${bold}[${choicesp[$i]^}"  
                unset choicesp[$i] 
                for j in "${!choicesp[@]}"; do                          
                    if ! [[ ${choicesp[$j]} == ${choicesp[$i]} ]]; then 
                        prmpt1="$prmpt1/${choicesp[$j]}" 
                        unset ${choicesp[$j]}
                    fi
                done
            fi
            
        #    # ZSH can't do ${string^} text substition like bash
        #    # (capitalize the first letter in a string)
            if test -n "$ZSH_VERSION"; then 
                local i=1 
                #local o op 
                #! [ -z "$oflag" ] && o="${choices[4]}" && op="${choicesp[4]}" 
                #
                if [ -n "$yflag" ]; then
                    i=1 
                    color="$ycolor"
                fi 
                if [ -n "$nflag" ] || (test -n "$condition" && ! eval "$condition"); then 
                    nflag='n'
                    color="$ncolor"
                    i=1 
                    choices=("${choices[3]}" "${choices[2]}" "${choices[1]}") 
                    choicesp=("${choicesp[3]}" "${choicesp[2]}" "${choicesp[1]}")
                fi 
                if [ -n "$eflag" ] || ([[ $editreplaced == 'y' ]] && [ -n "$oflag"]); then
                    color="$ecolor"
                    i=1 
                    #if test -n "$nflag"; then
                        choices=(${choices[2]} "${choices[1]}" "${choices[3]}") 
                        choicesp=(${choicesp[2]} "${choicesp[1]}" "${choicesp[3]}") 
                    #else
                    #    choices=(${choices[2]} "${choices[3]}" "${choices[1]}")  
                    #    choicesp=(${choicesp[2]} "${choicesp[3]}" "${choicesp[1]}")
                    #fi
                fi 
               # if [ -n "$oflag" ] && [[ $editreplaced == 'n' ]]; then 
               #     i=4 
               #     color="$ocolor"
               # fi 
                   
                local fst="$(sed 's/\([[:alpha:]](\)/\U\1/' <<<${choicesp[$i]})" 
                prmpt1=" ${bold}[$fst" 
                choicesp[$i]=() 
                for i in "${choicesp[@]}"; do
                    prmpt1="$prmpt1/$i" 
                    choicesp[${choicesp[(i)$i]}]=() 
                done 
            fi    
            prmpt1="$prmpt1]:${normal} "
        fi

        test -z "$noprompt" && 
            prmpt2="$prmpt$prmpt1" || 
            prmpt2="$prmpt"

        [[ $color == 'orange' ]] && color='yellow' 
        [[ $color == 'ORANGE' ]] && color='YELLOW' 

        test -z "$color" && 
            reade $nostyle -i "${choices[*]}" -p "$prmpt2" vvvvvvvvvv ||
            reade $nostyle -Q $color -i "${choices[*]}" -p "$prmpt2" vvvvvvvvvv
    
        #Undercase only
        vvvvvvvvvv=$(echo "$vvvvvvvvvv" | tr '[:upper:]' '[:lower:]')

        if [[ "$vvvvvvvvvv" == 'e' ]]; then
            eval "${YES_NO_EDITOR} ${files[*]}"
        #elif ! test -z "$first" && [[ "$vvvvvvvvvv" == "$first" ]]; then
        #    ${othercmd} ${files[*]}
        fi

        if test -n "$norepeat"; then
            if ! [[ "$vvvvvvvvvv" == 'n' ]] && ! [[ "$vvvvvvvvvv" == 'y' ]]; then
                if [[ "$norepeat" == 'n' ]]; then
                    test -z "$color" && 
                        readyn $nostyle --no -p "$prmpt" vvvvvvvvvv ||
                        readyn $nostyle --no -N $color -p "$prmpt" vvvvvvvvvv
                else
                    test -z "$color" && 
                        readyn $nostyle -p "$prmpt" vvvvvvvvvv ||
                        readyn $nostyle -Y $color -p "$prmpt" vvvvvvvvvv
                fi
            fi
        else
            while :; do
                [[ "$vvvvvvvvvv" == 'y' ]] || [[ "$vvvvvvvvvv" == 'n' ]] && break
                 
                if test -z $color; then 
                    reade $nostyle -i "${choices[*]}" -p "$prmpt2" vvvvvvvvvv || break
                else
                    reade $nostyle -Q "$color" -i "${choices[*]}" -p "$prmpt2" vvvvvvvvvv || break
                fi
                
                # For whatever reason,  ' || break' doesnt work so this check here is being put here if something like an interrupt occured
                test -z $vvvvvvvvvv && break
                
                # Undercase only
                vvvvvvvvvv=$(echo "$vvvvvvvvvv" | tr '[:upper:]' '[:lower:]')

                [[ "$vvvvvvvvvv" == 'y' ]] || [[ "$vvvvvvvvvv" == 'n' ]] && break

                if [[ "$vvvvvvvvvv" == 'e' ]]; then
                    #echo ${files[*]}
                    eval "${YES_NO_EDITOR} ${files[*]}"
                #elif test -n "$first" && [[ "$vvvvvvvvvv" == "$first" ]]; then
                #    ${othercmd} ${files[*]}
                fi
            done
        fi

        test -n "$functn" && [[ "$vvvvvvvvvv" == 'y' ]] && 
            ${functn} && return 0 ||
        test $# -gt 0 && 
            eval "${@:$#:1}=$vvvvvvvvvv"

    fi
}
