# Bash config
# https://www.topbug.net/blog/2017/07/31/inputrc-for-humans/
# This line carries over site-wide readline configuration to the user configuration. Usually /etc/inputrc includes some goodies.
$include /etc/inputrc

# Make sure we don't output everything on the 1 line
set horizontal-scroll-mode Off

# Enable 8bit input
set meta-flag On 
set input-meta On

# Turns off 8th bit stripping
set convert-meta Off

# Keep the 8th bit for display
set output-meta On

# none, visible or audible
set bell-style none

# This line sets every completion which is a symbolic link to a directory to have a slash appended.
set mark-symlinked-directories On

# No echoing of f.ex. ^C after pressing keys
set echo-control-characters off


#This line sets 3 to be the maximum number of characters to be the common prefix to display for completions. 
#If the common prefix has more than 3 characters, they are replaced by ellipsis. For example, assume we are in a directory with files Screenshot_20170730.png and Screenshot_20170731.png. 
#If using the default option, an auto completion prints Screenshot_20170730.png Screenshot_20170731.png. If this option is set, then the auto completion prints ...0.png ...1.png. However, if the common prefix is very short (fewer or equal to 3 characters), the full file names are still printed. 
#For example, in a directory with files S10.png and S11.png, an auto completion still prints S10.png S11.png. 
#This can be very useful when auto completing in a directory in which a lot of files have a long common prefix, such a camera image directory.
set completion-prefix-display-length 3

# Ignore cases
set completion-ignore-case On

# This line sets the completions to be listed immediately instead of ringing the bell, when the completing word has more than one possible completion.
set show-all-if-ambiguous On

# This line sets the completions to be listed immediately instead of ringing the bell, when the completing word has more than one possible completion but no partial completion can be made
set show-all-if-unmodified On

# This line sets readline to display possible completions using different colors to indicate their file types. The colors are determined by the environmental variable LS_COLORS, which can be nicely configured.
set colored-stats On

# This lines sets completions to be appended by characters that indicate their file types reported by the stat system call
set visible-stats On


# \e : escape
# \M : Meta (alt)
# \t : tab
# \C : Ctrl
# Backspace : Rubout
# nop => no operation, but 'redraw-current-line' might work better
# https://unix.stackexchange.com/questions/556703/how-to-bind-a-key-combination-to-null-in-inputrc
# 'bind -l' for all options
# 'bind -p' for all bindings
# You can also run 'read' (or 'cat' + Ctrl+v)
# That way you can read the characters escape sequences
# The ^[ indicates an escape character in your shell, so this means that your f.ex. Home key has an escape code of [1~ and you End key has an escape code of [4~. Since these escape codes are not listed in the default Readline configuration, you will need to add them: \e[1~ or \e[4~
# Also
# https://unix.stackexchange.com/questions/548726/bash-readline-inputrc-bind-key-to-a-sequence-of-multiple-commands

# And To see the complete character string sent by a key, you can use this command, and type the key within 2 seconds:
# stty raw; sleep 2; echo; stty cooked


"\C-p": redraw-current-line
"\C-c":redraw-current-line
"\C-j": redraw-current-line
"\C-d": redraw-current-line

# \015 represents the enter key
"\C-l": "clear && tput cup $(tput lines) 0 && ls \015" 

# Shift left/right
"\e[1;2D": backward-word
"\e[1;2C": forward-word
#"\e": backward-kill-word

# Up and down arrow will now intelligently complete partially completed
# commands by searching through the existing history.
#"\e[A": history-search-backward
#"\e[B": history-search-forward
