# testing:
# https://unix.stackexchange.com/questions/595870/tmux-how-can-i-create-session-window-pane-and-run-a-command-in-the-pane
# set -g pane-border-format "#{@mytitle}"

#Decent copy mode
# To copy:
#bind-key -n -t emacs-copy M-w copy-pipe "xclip -i -sel p -f | xclip -i -sel c "

# To paste:
#bind-key -n C-y run "xclip -o | tmux load-buffer - ; tmux paste-buffer"

# pane movement
#bind-key j command-prompt -p "join pane from:"  "join-pane -s '%%'"
#bind-key s command-prompt -p "send pane to:"  "join-pane -t '%%'"

#Move to different window and rename window
#unbind n  #DEFAULT KEY: Move to next window
#unbind r  #DEFAULT KEY: change current window interactively
#bind r command-prompt "rename-window '%%'"
#bind n new-window -c "#{pane_current_path}"

#(echo \"#{session_name}\")
# Set status bar
#set -g status-bg black
#set -g status-fg white
#set -g status-left ""
#set -g status-right "#[fg=green]#H"

#Plugin Manager
set -g @plugin 'tmux-plugins/tpm'
# Clipboard
set -g @plugin 'tmux-plugins/tmux-yank'
# Like vim-sensible, just good settings to have overall
set -g @plugin 'tmux-plugins/tmux-sensible'
# Restore tmux environment with savepoints
set -g @plugin 'tmux-plugins/tmux-resurrect'
# Same as tmux ressurect but automatically
set -g @plugin 'tmux-plugins/tmux-continuum'

# Last saved environment is automatically restored when tmux is started.
set -g @continuum-restore 'on'

# tmux allows a command to be bound to most keys, with or without a prefix key.
# When specifying keys, most represent themselves (for example ‘A’ to ‘Z’).
# Ctrl keys may be prefixed with ‘C-’ or ‘^’, and Alt (meta) with ‘M-’.
# In addition, the following special key names are accepted: Up, Down, Left, Right, BSpace, BTab, DC (Delete), End, Enter, Escape, F1 to F12, Home, IC (Insert), NPage/PageDown/PgDn, PPage/PageUp/PgUp, Space, and Tab.

#Prefix key from Ctrl+b to Ctrl+q
#unbind C-b
set-option -g prefix C-b
bind-key C-b send-prefix

#Or something else
#set -g prefix Escape
#bind Escape send-prefix

#Better choose mode
bind-key a choose-tree -NO

#Default for copy-mode
bind-key -n M-c copy-mode

#Default for command-prompt
bind-key : command-prompt


# nvim colors
set-option -sa terminal-overrides ',xterm-256color:RGB'

#Mouse mode on
set -g mouse on

#Start numbering sessions from 1 instead of 0
set -g base-index 1
set-window-option -g pane-base-index 1
# Set current working dir as status
set -g status-left "#{pane_current_path}  "
setw -g window-status-format "#{pane_current_path}  "
set-window-option -g window-status-format ' #I #W'
set-window-option -g window-status-current-format ' #I #W'
set -g status-justify centre
set -g status-interval 2
set -g status-left-length 50

# Keep command line at bottom
#trap 'printf "%s\n" "-----$ $BASH_COMMAND"' DEBUG

# HOOKS
# Tested this only with keeping track wich panes

#set-hook -g client-attached 'run-shell "tmux list-panes -a > ~/panes.tmux"'
#set-hook -g session-created 'run-shell "tmux list-panes -a > ~/panes.tmux"'
#set-hook -g session-closed 'run-shell "tmux list-panes -a > ~/panes.tmux"'
#set-hook -g session-renamed 'run-shell "tmux list-panes -a > ~/panes.tmux"'
#set-hook -g window-linked 'run-shell "tmux list-panes -a > ~/panes.tmux"'
#set-hook -g window-unlinked 'run-shell "tmux list-panes -a > ~/panes.tmux"'
#set-hook -g window-renamed 'run-shell "tmux list-panes -a > ~/panes.tmux"'
#set-hook -g pane-focus-in 'run-shell "tmux list-panes -a > ~/panes.tmux"'
#set-hook -g pane-exited 'run-shell "tmux list-panes -a > ~/panes.tmux"'

unbind C-Up
unbind C-Down
unbind C-Left
unbind C-Right

unbind -n C-Up
unbind -n M-Down
unbind -n M-Left
unbind -n M-Right

unbind -n M-Up
unbind -n M-Down
unbind -n M-Left
unbind -n M-Right

# Switch attached client
# unbind )
# Switch back attached client
# unbind L
# Next window
unbind n
# Previous window
unbind p

# Rotate window
unbind o

# Kill current window
unbind &

#Rebind split planes to Prefix+v/Prefix+h
unbind % # Split vertically
unbind '"' # Split horizontally
unbind b # Last window

bind -n M-Up resize-pane -U 5
bind -n M-Down resize-pane -D 5
bind -n M-Left resize-pane -L 5
bind -n M-Right resize-pane -R 5

# (H = Vertical??)
bind Down split-window -v -c "#{pane_current_path}"
bind Up split-window -h -c "#{pane_current_path}"

#bind C-Left run-shell 'tmux rotate-window -ZUt "#{session_name}:#{window_index}"'
#bind C-Right run-shell 'tmux rotate-window -ZDt "#{session_name}:#{window_index}"'

# Next and previous window and session (w/ prefix)
bind n new-window -ac "#{pane_current_path}"
bind k run-shell 'tmux kill-window -t "#{session_name}:#{window_index}"'
bind Left select-window -p
bind Right select-window -n

unbind e
bind -n C-e run-shell 'tmux break-pane -bd -s "#{session_name}:#{window_index}.#{pane_index}" -t "main:1" '

# 'Relocate' => move last window back
unbind r
bind-key r run-shell 'tmux move-pane -bd -t "#{session_name}:#{window_index}.#{pane_index}" -s "main:$(tmux list-windows -F #{session_windows} -t /"main/")"'

#bind M-Left run-shell 'tmux kill-session -t "#{session_name}"'
#bind M-Right new-session -t main

# # # VIM TMUX NAVIGATOR # # #
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
| grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?)(diff)?$'"
bind-key -n 'C-S-Left' if-shell "$is_vim" 'send-keys C-S-Left'  'select-pane -L'
bind-key -n 'C-S-Down' if-shell "$is_vim" 'send-keys C-S-Down'  'select-pane -D'
bind-key -n 'C-S-Up' if-shell "$is_vim" 'send-keys C-S-Up'  'select-pane -U'
bind-key -n 'C-S-Right' if-shell "$is_vim" 'send-keys C-S-Right'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
"bind-key -n 'C-End' if-shell \"$is_vim\" 'send-keys C-End'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
"bind-key -n 'C-End' if-shell \"$is_vim\" 'send-keys C-End'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-S-Left' select-pane -L
bind-key -T copy-mode-vi 'C-S-Down' select-pane -D
bind-key -T copy-mode-vi 'C-S-Up' select-pane -U
bind-key -T copy-mode-vi 'C-S-Right' select-pane -R
#bind-key -T copy-mode-vi 'C-End' select-pane -l

#For moving around stuff easier
#set -g remain-on-exit on
bind -n C-S-Left  select-pane -L
bind -n C-S-Right select-pane -R
bind -n C-S-Up    select-pane -U
bind -n C-S-Down  select-pane -D

#### COLOUR (Solarized dark)

# default statusbar colors
set-option -g status-style fg=yellow,bg=black #yellow and base02

# default window title colors
set-window-option -g window-status-style fg=brightblue,bg=default #base0 and default
#set-window-option -g window-status-style dim

# active window title colors
set-window-option -g window-status-current-style fg=brightred,bg=default #orange and default
#set-window-option -g window-status-current-style bright

# pane border
set-option -g pane-border-style fg=black #base02
set-option -g pane-active-border-style fg=brightgreen #base01

# message text
set-option -g message-style fg=brightred,bg=black #orange and base01

# pane number display
set-option -g display-panes-active-colour brightred #orange
set-option -g display-panes-colour blue #blue

# clock
set-window-option -g clock-mode-colour green #green

# bell
set-window-option -g window-status-bell-style fg=black,bg=red #base02, red


#https://superuser.com/questions/1551355/how-to-close-tmux-session-without-exiting-tmux
#set-option -g detach-on-destroy off
#-#-# start_of_ranger_tmux_config #-#-#
bind-key Bspace run-shell -b '/usr/bin/python3 -m ranger_tmux.drop'
#-#-# end_of_ranger_tmux_config #-#-#

run '~/.tmux/plugins/tpm/tpm'
